package sort

// SelectionSort 选择排序
func SelectionSort(s []int) {
	n := len(s)
	for i := 0; i < n-1; i++ {
		minIdx := i
		for j := i + 1; j < n; j++ {
			if s[j] < s[minIdx] {
				minIdx = j
			}
		}
		s[i], s[minIdx] = s[minIdx], s[i]
	}
}

/*
证明:
* 循环不变式: s[:i+1]为已排序, 且s[:]中的元素为排序前的元素
* 初始化:
> 循环在第一次迭代之前,它为真
第一次贴点之前i=0, s[0:i]为s[0:1], 仅有一个元素, 所以循环不变式为真
* 保持:
> 若循环在某次迭代之前它为真, 那么下次迭代之前它仍为真
在进行下一次迭代过程中, 选择排序做的工作就是从s[i+1:n]中找到比s[i]小, 且为s[i+1:n]中最小的数互换位置, 这样s[0:i+1]依然为有序的, 且s[:]中的元素为排序前的元素, 所以循环不变式依然为真
* 终止:
当循环终止时, i=n-1, 又根据`保持`中的分析, 此时s[0:i+1]为有序, 也就是s[0:n]为有序, 并且s[:]中元素为排序前的元素, 所以可以证明当循环终止时输入的数据集合已经排序完成.
*/

/*
分析:

*/
